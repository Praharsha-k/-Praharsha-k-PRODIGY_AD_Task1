import tkinter as tk

# Create the main window
root = tk.Tk()
root.title("iPhone Calculator")

# Set the window to full screen
root.attributes('-fullscreen', True)

# Function to exit full screen
def exit_fullscreen(event):
    root.attributes('-fullscreen', False)

# Bind the Escape key to exit full screen
root.bind('<Escape>', exit_fullscreen)

# Set background color to black
root.configure(bg="#000000")

# Entry widget to display input and result
entry = tk.Entry(root, width=16, borderwidth=0, font=('Helvetica', 40), justify='right', bg="#1c1c1c", fg="#ffffff")
entry.grid(row=0, column=0, columnspan=4, padx=20, pady=30, sticky='nsew')

# Configure grid weights to make the layout responsive
root.grid_rowconfigure(0, weight=1)
for i in range(1, 6):  # Configure rows for buttons
    root.grid_rowconfigure(i, weight=1)
for j in range(4):  # Configure columns for buttons
    root.grid_columnconfigure(j, weight=1)

# Function to handle button click
def button_click(number):
    current = entry.get()
    entry.delete(0, tk.END)
    entry.insert(0, current + str(number))

# Function to clear the entry field
def button_clear():
    entry.delete(0, tk.END)

# Function to handle '=' button and perform the calculation
def button_equal():
    try:
        expression = entry.get().replace('÷', '/').replace('x', '*')  # Replace ÷ with / and x with *
        result = str(eval(expression))  # Safely evaluate the expression
        entry.delete(0, tk.END)
        entry.insert(0, result)
    except ZeroDivisionError:
        entry.delete(0, tk.END)
        entry.insert(0, "Error: Div by 0")
    except:
        entry.delete(0, tk.END)
        entry.insert(0, "Error")

# Function to handle decimal point
def button_decimal():
    current = entry.get()
    if '.' not in current:  # Ensure no multiple decimals
        entry.insert(tk.END, '.')

# Function to handle keyboard input
def handle_key(event):
    if event.char.isdigit():  # Check if the key is a number
        button_click(event.char)
    elif event.char in '+-*/':  # Handle basic operators
        button_click(event.char.replace('*', 'x').replace('/', '÷'))
    elif event.keysym == 'Return':  # Handle '=' key (Enter)
        button_equal()
    elif event.keysym == 'BackSpace':  # Handle BackSpace key to clear last character
        current = entry.get()
        entry.delete(0, tk.END)
        entry.insert(0, current[:-1])
    elif event.keysym == 'Delete':  # Handle Delete key to clear all
        button_clear()
    elif event.char == '.':  # Handle decimal point
        button_decimal()

# Bind keyboard events
root.bind('<Key>', handle_key)

# Define the button layout and their functions
buttons = [
    ('7', 1, 0), ('8', 1, 1), ('9', 1, 2), ('÷', 1, 3),  # Changed '/' to '÷'
    ('4', 2, 0), ('5', 2, 1), ('6', 2, 2), ('x', 2, 3),  # Changed '*' to 'x'
    ('1', 3, 0), ('2', 3, 1), ('3', 3, 2), ('-', 3, 3),
    ('0', 4, 0), ('.', 4, 1), ('+', 4, 2), ('=', 4, 3),
]

# Create buttons and attach them to the grid with black theme styling
for (text, row, col) in buttons:
    button = tk.Button(root, text=text, padx=0, pady=0, font=('Helvetica', 30), 
                       bg="#333333", fg="#ffffff", activebackground="#444444", borderwidth=0)
    button.grid(row=row, column=col, sticky='nsew')
    button.config(height=2)

# Clear button to reset everything, changed to "AC"
button_clear = tk.Button(root, text="AC", padx=0, pady=0, font=('Helvetica', 30), bg="#e74c3c", 
                         fg="#ffffff", activebackground="#c0392b", command=button_clear, borderwidth=0)
button_clear.grid(row=5, column=0, columnspan=4, sticky='nsew')
button_clear.config(height=2)

# Start the GUI event loop
root.mainloop()
